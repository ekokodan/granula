name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-api:
    name: Lint API
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run Black
        working-directory: ./apps/api
        run: black --check app/ tests/
      
      - name: Run Ruff
        working-directory: ./apps/api
        run: ruff check app/ tests/
      
      - name: Run MyPy
        working-directory: ./apps/api
        run: mypy app/

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: granula_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run tests
        working-directory: ./apps/api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/granula_test
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing
        run: |
          pytest -v --cov=app --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage.xml

  lint-web:
    name: Lint Web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./apps/web/package-lock.json
      
      - name: Install dependencies
        working-directory: ./apps/web
        run: npm ci
      
      - name: Run ESLint
        working-directory: ./apps/web
        run: npm run lint
      
      - name: Run TypeScript check
        working-directory: ./apps/web
        run: npm run typecheck

  test-web:
    name: Test Web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./apps/web/package-lock.json
      
      - name: Install dependencies
        working-directory: ./apps/web
        run: npm ci
      
      - name: Run tests
        working-directory: ./apps/web
        run: npm run test:coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/web/coverage/coverage-final.json

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-api, test-api, lint-web, test-web]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build API image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/api
          push: false
          tags: granula-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Web image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/web
          push: false
          tags: granula-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Generate preview URL
        id: preview
        run: |
          echo "url=https://pr-${{ github.event.pull_request.number }}.preview.granula.app" >> $GITHUB_OUTPUT
      
      - name: Build and Deploy
        run: |
          # Build images with PR-specific tags
          docker build -t granula-api:pr-${{ github.event.pull_request.number }} ./apps/api
          docker build -t granula-web:pr-${{ github.event.pull_request.number }} ./apps/web
          
          # Deploy to preview environment (customize based on your infrastructure)
          echo "Deploying to preview environment..."
      
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const url = '${{ steps.preview.outputs.url }}';
            const body = `ðŸš€ Preview deployment ready!\n\nVisit: ${url}\n\n*This preview will be automatically removed when the PR is closed.*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview deployment ready')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  cleanup-preview:
    name: Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    steps:
      - name: Remove preview deployment
        run: |
          echo "Removing preview deployment for PR #${{ github.event.pull_request.number }}..."
          # Add cleanup commands here